#!/usr/bin/env bash


#
# variables
#
# FIXME: change back
#DOTS_DIR="$HOME/.dots"
DOTS_DIR="$HOME/projects/dotfiles"

RED="\e[31m" # errors
GREEN="\e[32m" # successful roles
YELLOW="\e[33m" # actions
BLUE="\e[34m" # pre-setup messages
MAGENTA="\e[35m" # starting new role
CYAN="\e[36m" # variables
ENDCOLOR="\e[0m"

source /etc/os-release


#
# helper functions
#

# usage: install_with_package_manager <package_manager> <package>
function install_with_package_manager() {
    if [[ -z "$1" ]]; then
        echo -e "${RED}first positional argument (package manager) missing${ENDCOLOR}"
        return 1
    fi

    if [[ -z "$2" ]]; then
        echo -e "${RED}second positional argument (package) missing${ENDCOLOR}"
        return 1
    fi

    echo -e "${YELLOW}installing${ENDCOLOR} ${CYAN}$2${ENDCOLOR} ${YELLOW}with${ENDCOLOR} ${CYAN}$1${ENDCOLOR}"
    case "$1" in
        pacman)
            if ! pacman -Q "$2" >/dev/null 2>&1; then
                sudo pacman -S --noconfirm "$2"
            fi
        ;;
        apt|apt-get)
            if ! dpkg -s "$2" >/dev/null 2>&1; then
                sudo apt-get install -y -q "$2"
            fi
        ;;
        yay)
            if ! pacman -Q yay >/dev/null 2>&1; then
                echo -e "${RED}trying to install with yay, but yay doesn't exist${ENDCOLOR}"
                return 1
            fi

            if ! yay -Q "$2" >/dev/null 2>&1; then
                yay -S --noconfirm "$2"
            fi
        ;;
        *)
            echo -e "${RED}unsupported package manager:${ENDCOLOR} ${CYAN}$1${ENDCOLOR}"
            return 1
        ;;
    esac
}

# usage: link_file <src_file> <link_dest>
function link_file() {
    if [[ -z "$1" ]]; then
        echo -e "${RED}first positional argument (src_file) missing${ENDCOLOR}"
        return 1
    fi

    if [[ -z "$2" ]]; then
        echo -e "${RED}second positional argument (link_dest) missing${ENDCOLOR}"
        return 1
    fi

    if [[ -f "$2" ]] || [[ -d "$2" ]] || [[ -L "$2" ]]; then
        echo -e "${YELLOW}removing existing${ENDCOLOR} ${CYAN}$2${ENDCOLOR}"
        rm -r "$2"
    fi

    echo -e "${YELLOW}linking new${ENDCOLOR} ${CYAN}$1${ENDCOLOR}"
    ln -s "$1" "$2"
}


#
# os specific setup
#
echo -e "${BLUE}loading Setup for detected os:${ENDCOLOR} ${CYAN}${ID}${ENDCOLOR}"
case $ID in
    ubuntu|debian)
        echo -e "${BLUE}update all packages${ENDCOLOR}"
        sudo apt -q update && sudo apt -q upgrade
        install_with_package_manager apt git
    ;;
    arch)
        echo -e "${BLUE}update all packages${ENDCOLOR}"
        sudo pacman -Syu

        if command -v yay >/dev/null 2>&1; then
            yay -Syu
        fi

        echo -e "${BLUE}setting locale${ENDCOLOR}"
        sudo localectl set-locale LANG=en_US.UTF-8

        install_with_package_manager pacman git
    ;;
    *)
        echo -e "${RED}unsupported os${ENDCOLOR}"
        exit 1
    ;;
esac


#
# dotfiles repository setup / sync
#
if ! [[ -d "$DOTS_DIR" ]]; then
    echo -e "${BLUE}cloning repository${ENDCOLOR}"
    git clone --recurse-submodules --quiet git@github.com:ethanrutt/dotfiles.git "$DOTS_DIR"
else
    echo -e "${BLUE}updating repository${ENDCOLOR}"
    git -C "$DOTS_DIR" pull --recurse-submodules --quiet
fi

if ! [[ -d "$HOME/.config" ]]; then
    mkdir "$HOME/.config"
fi


#
# installation
#

# terminal tools
source "$DOTS_DIR/groups/git/git_setup.sh"
source "$DOTS_DIR/groups/delta/delta_setup.sh"
source "$DOTS_DIR/groups/bat/bat_setup.sh"
source "$DOTS_DIR/groups/eza/eza_setup.sh"
source "$DOTS_DIR/groups/tmux/tmux_setup.sh"
source "$DOTS_DIR/groups/fd/fd_setup.sh"
source "$DOTS_DIR/groups/fzf/fzf_setup.sh"
source "$DOTS_DIR/groups/sh/sh_setup.sh"

# nvim
source "$DOTS_DIR/groups/nvm/nvm_setup.sh"
source "$DOTS_DIR/groups/nvim/nvim_setup.sh"
#
# if [[ $(systemd-detect-virt) == "wsl" ]] && [[ "$ID" == "ubuntu" ]]; then
#     source "$DOTS_DIR/groups/wsl/wsl_setup.bash"
# fi
#
if [[ "$ID" == "arch" ]]; then
    source "$DOTS_DIR/groups/man/man_setup.bash"
    source "$DOTS_DIR/groups/yay/yay_setup.bash"
fi
#
# if [[ $(systemd-detect-virt) == "none" ]] && [[ "$ID" == "arch" ]]; then
#     source "$DOTS_DIR/groups/xorg/xorg_setup.bash"
#     source "$DOTS_DIR/groups/misc/misc_setup.bash"
#     source "$DOTS_DIR/groups/picom/picom_setup.bash"
#     source "$DOTS_DIR/groups/alacritty/alacritty_setup.bash"
#     source "$DOTS_DIR/groups/obsidian/obsidian_setup.bash"
#     source "$DOTS_DIR/groups/bluetooth/bluetooth_setup.bash"
#     source "$DOTS_DIR/groups/rofi/rofi_setup.bash"
#     source "$DOTS_DIR/groups/awesome/awesome_setup.bash"
#     source "$DOTS_DIR/groups/wallpapers/wallpapers_setup.bash"
# fi
#
echo -e "${GREEN}everything is finished. running test${ENDCOLOR}"
#
# source "$DOTS_DIR/test/confirm_installed.bash"
